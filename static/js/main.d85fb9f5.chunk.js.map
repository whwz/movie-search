{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["db","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","filterMovies","e","text","currentTarget","value","filteredMovies","getFilteredMovies","setState","state","movies","_this2","page","fetch","then","res","json","i","length","push","results","setTimeout","filter","movie","title","toLowerCase","includes","react_default","a","createElement","className","onInput","App_MoviesList","Component","MoviesList","_ref","map","vote_count","key","src","poster_path","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAGMA,SAAK,IACLC,cACJ,SAAAA,EAAYC,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACEE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAwBRQ,aAAe,SAACC,GACd,IAAMC,EAAOD,EAAEE,cAAcC,MACvBC,EAAiBZ,EAAKa,kBAAkBJ,GAC9CT,EAAKc,SAAS,CACZF,oBA3BFZ,EAAKe,MAAQ,CACXC,OAAQnB,EACRe,eAAgBf,GAJpBG,mFAWE,IAHkB,IAAAiB,EAAAd,KACde,EAAO,EAELA,EAAO,IACXC,MAAM,qDAAuDD,EAAO,4DACnEE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJ,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAI,QAAYE,OAAQD,IACzC1B,EAAG4B,KAAKH,EAAKI,QAAQH,MAGzBL,IAGFS,WAAW,WAAKV,EAAKH,SAAS,CAACE,OAAQnB,KAAO,+CAW9BY,GAChB,OAAON,KAAKY,MAAMC,OAAOY,OAAQ,SAAAC,GAAK,OACpCA,EAAMC,MAAMC,cAAcC,SAASvB,EAAKsB,kDAI1C,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAOE,QAASlC,KAAKI,eACrB0B,EAAAC,EAAAC,cAACG,EAAD,CAAYtB,OAAQb,KAAKY,MAAMH,yBA5CrB2B,aAkDZC,EAAa,SAAAC,GAAc,IAAZzB,EAAYyB,EAAZzB,OAEnB,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAEZpB,EAAO0B,IAAI,SAAAb,GAAK,OACfA,EAAMc,WAAa,IACjBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOQ,IAAKf,EAAMC,OAC/BG,EAAAC,EAAAC,cAAA,OAAKU,IAPF,kDAOchB,EAAMiB,YAAaC,IAAI,KACxCd,EAAAC,EAAAC,cAAA,SAAIN,EAAMC,OACVG,EAAAC,EAAAC,cAAA,SAAIN,EAAMc,aAEZ,SAOK7C,IC7DKkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.d85fb9f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst db = [];\nclass App extends Component {\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      movies: db,\n      filteredMovies: db\n    }\n  }\n  \n  componentDidMount() {\n    let page = 1;\n\n    while(page < 51){\n      fetch(\"https://api.themoviedb.org/3/movie/top_rated?page=\" + page + \"&language=en-US&api_key=9d59af51a07ce660e8606073f1dfe0ec\")\n      .then(res => res.json())\n      .then(json => {\n        for(let i = 0; i < json[\"results\"].length; i++)\n          db.push(json.results[i])\n        });\n\n      page++;\n    }\n\n    setTimeout(()=>{this.setState({movies: db})}, 1000);\n  }\n\n  filterMovies = (e) => {\n    const text = e.currentTarget.value;\n    const filteredMovies = this.getFilteredMovies(text);\n    this.setState({\n      filteredMovies\n    });\n  }\n\n  getFilteredMovies(text) {\n    return this.state.movies.filter( movie => \n      movie.title.toLowerCase().includes(text.toLowerCase()))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input onInput={this.filterMovies}></input>\n        <MoviesList movies={this.state.filteredMovies} />\n      </div>\n    );\n  }\n}\n\nconst MoviesList = ({movies}) => {\n  const link = \"https://image.tmdb.org/t/p/w185_and_h278_bestv2\";\n  return (\n    <div className=\"cards\">\n\n      {movies.map(movie => \n        movie.vote_count > 2000 ?\n          <div className=\"item\" key={movie.title}>\n            <img src={link + movie.poster_path} alt=\"\" />\n            <p>{movie.title}</p>\n            <p>{movie.vote_count}</p>\n          </div> \n        : null\n      )}\n\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}